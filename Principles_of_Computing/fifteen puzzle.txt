"""
Loyd's Fifteen puzzle - solver and visualizer
Note that solved configuration has the blank (zero) tile in upper left
Use the arrows key to swap this tile with its neighbors
"""

import poc_fifteen_gui

class Puzzle:
    """
    Class representation for the Fifteen puzzle
    """

    def __init__(self, puzzle_height, puzzle_width, initial_grid=None):
        """
        Initialize puzzle with default height and width
        Returns a Puzzle object
        """
        self._height = puzzle_height
        self._width = puzzle_width
        self._grid = [[col + puzzle_width * row
                       for col in range(self._width)]
                      for row in range(self._height)]

        if initial_grid != None:
            for row in range(puzzle_height):
                for col in range(puzzle_width):
                    self._grid[row][col] = initial_grid[row][col]

    def __str__(self):
        """
        Generate string representaion for puzzle
        Returns a string
        """
        ans = ""
        for row in range(self._height):
            ans += str(self._grid[row])
            ans += "\n"
        return ans

    #####################################
    # GUI methods

    def get_height(self):
        """
        Getter for puzzle height
        Returns an integer
        """
        return self._height

    def get_width(self):
        """
        Getter for puzzle width
        Returns an integer
        """
        return self._width

    def get_number(self, row, col):
        """
        Getter for the number at tile position pos
        Returns an integer
        """
        return self._grid[row][col]

    def set_number(self, row, col, value):
        """
        Setter for the number at tile position pos
        """
        self._grid[row][col] = value
    
    def get_solved_number(self,row,col):
        """
        returns the target value(solved value) at the given row and col
        """
        return row*(self._width) + col

    def clone(self):
        """
        Make a copy of the puzzle to update during solving
        Returns a Puzzle object
        """
        new_puzzle = Puzzle(self._height, self._width, self._grid)
        return new_puzzle

    ########################################################
    # Core puzzle methods
    
    def get_zero_tile(self):
        """ 
        returns a tuple (row,col) of the zero tile
        """
        for row in range(self.get_height()):
            for col in range(self.get_width()):
                if self.get_number(row,col) == 0:
                    return (row,col)

    def current_position(self, solved_row, solved_col):
        """
        Locate the current position of the tile that will be at
        position (solved_row, solved_col) when the puzzle is solved
        Returns a tuple of two integers        
        """
        solved_value = (solved_col + self._width * solved_row)

        for row in range(self._height):
            for col in range(self._width):
                if self._grid[row][col] == solved_value:
                    return (row, col)
        assert False, "Value " + str(solved_value) + " not found"

    def update_puzzle(self, move_string):
        """
        Updates the puzzle state based on the provided move string
        """
        zero_row, zero_col = self.current_position(0, 0)
        for direction in move_string:
            if direction == "l":
                assert zero_col > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col - 1]
                self._grid[zero_row][zero_col - 1] = 0
                zero_col -= 1
            elif direction == "r":
                assert zero_col < self._width - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col + 1]
                self._grid[zero_row][zero_col + 1] = 0
                zero_col += 1
            elif direction == "u":
                assert zero_row > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row - 1][zero_col]
                self._grid[zero_row - 1][zero_col] = 0
                zero_row -= 1
            elif direction == "d":
                assert zero_row < self._height - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row + 1][zero_col]
                self._grid[zero_row + 1][zero_col] = 0
                zero_row += 1
            else:
                assert False, "invalid direction: " + direction

    ##################################################################
    # Phase one methods

    def lower_row_invariant(self, target_row, target_col):
        """
        Check whether the puzzle satisfies the specified invariant
        at the given position in the bottom rows of the puzzle (target_row > 1)
        Returns a boolean
        """
        if self.get_number(target_row,target_col)!=0:
            #print "1"
            return False
        height = self.get_height()
        width = self.get_width()
        for temp_row in range(target_row+1,height,1):
            for temp_col in range(width):
                if self.get_number(temp_row,temp_col)!= self.get_solved_number(temp_row,temp_col):
                    #print "2"
                    return False
        for temp_col in range(target_col+1,width,1):
            if self.get_number(target_row,temp_col)!= self.get_solved_number(target_row,temp_col):
                #print "3"
                return False
        return True    

    def solve_interior_tile(self, target_row, target_col):
        """
        Place correct tile at target position
        Updates puzzle and returns a move string
        """
        assert self.lower_row_invariant(target_row,target_col)
        moves = ''
        curr_pos = self.current_position(target_row,target_col)
        #print curr_pos
        # this functions has three sections
        # the first section movs the zero tile across the target tile
        up_dis = target_row - curr_pos[0]
        #print "up_dist -",up_dis
        up_moves = 'u'*up_dis
        moves = moves + up_moves
        #print moves
        side_dis = curr_pos[1] - target_col
        #print "side_dis - ",side_dis
        if side_dis>=0:
            side_moves = 'r'*side_dis
        elif side_dis<0:
            side_moves = 'l'*(side_dis*(-1))
        moves = moves + side_moves
        for move in up_moves:
            self.update_puzzle(move)
            #print self.__str__()
        for move in side_moves:
            self.update_puzzle(move)
            #print self.__str__()
            
        # the second phase moves the target tile to the same col where it is at the solved state    
        # if the target tile is at the same row, then this phase solves it
        # the final state for this phase is that the target tile will be at the same col, under zero tile
        col_difference = self.current_position(target_row,target_col)[1] - target_col
        #print col_difference
        if col_difference >0:
            if self.current_position(target_row,target_col)[0] == 0:
                cyclic_moves = 'dllur'*(col_difference)
                if cyclic_moves != '':    
                    cyclic_moves += 'dlu'
                moves = moves + cyclic_moves
                for move in cyclic_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
            else:
                cyclic_moves = 'ulldr'*(col_difference)
                cyclic_moves += 'ul'
                moves = moves + cyclic_moves
                for move in cyclic_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
        if col_difference <= 0:
            if self.current_position(target_row,target_col)[0] == target_row:
                cyclic_moves = 'urrdl'*(col_difference*(-1))
                moves += cyclic_moves
                for move in cyclic_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
            elif self.current_position(target_row,target_col)[0] == 0:
                cyclic_moves = ''
                cyclic_moves = 'drrul'*(col_difference*(-1))
                cyclic_moves += 'dru'
                moves += cyclic_moves
                for move in cyclic_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
            else:
                cyclic_moves = 'urrdl'*(col_difference*(-1))
                cyclic_moves += 'ur'
                moves += cyclic_moves
                for move in cyclic_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
        #phase 3 - moves the target tile to the target position
        # before the start of this phase the target tile is above the target location
        row_diff = target_row - self.current_position(target_row,target_col)[0]
        final_moves = 'lddru'*(row_diff)
        if final_moves!='':    
            final_moves += 'ld'
        moves += final_moves
        for move in final_moves:
            self.update_puzzle(move)
            #print self.__str__()
        assert self.lower_row_invariant(target_row,target_col-1)
        return moves
 

    def solve_col0_tile(self, target_row):
        """
        Solve tile in column zero on specified row (> 1)
        Updates puzzle and returns a move string
        """
        # the first part is when the target tile is already in the desired position
        curr_pos = self.current_position(target_row,0)
        if curr_pos[0] == target_row - 1 and curr_pos[1] == 0:
            moves = 'ur' + 'r'*(self.get_width() - 2)
            for move in moves:
                self.update_puzzle(move)
                print self.__str__()
            return moves    
        
        # the second part is when the target tile is not at the desired position
        # it has two phases, the first phase moves the board into a desired configreatiom
        # the second phase uses some fixed moves to solve for the tile
        if self.current_position(target_row,0)[1] == 0:
            row_diff = target_row - self.current_position(target_row,0)[0]
            moves = ''
            print row_diff
            up_moves = 'u'*(row_diff)
            up_moves += 'rddlu'*(row_diff-2)
            up_moves += 'rdl'
            up_moves += 'ruldrdlurdluurddlur'
            up_moves += 'r'*(self.get_width() - 2)
            moves = up_moves
            for move in up_moves:
                self.update_puzzle(move)
                print self.__str__()
            assert self.lower_row_invariant(target_row - 1,self.get_width() - 1) 
            return moves
        
        else:
            moves = ''
            col_diff = self.current_position(target_row,0)[1]
            row_diff = target_row - self.current_position(target_row,0)[0]
            col0_moves = 'u'
            col0_moves += 'r'*(col_diff)
            col0_moves += 'u'*(row_diff-1)
            col0_moves += 'lddru'*(row_diff-2)
            col0_moves += 'ldr'
            moves += col0_moves
            for move in col0_moves:
                self.update_puzzle(move)
                print self.__str__()
            col_diff = self.current_position(target_row,0)[1]   
            final_moves = 'ulldr'*(col_diff - 1)
            final_moves += 'ulld'
            final_moves += 'ruldrdlurdluurddlur'
            final_moves += 'r'*(self.get_width() - 2)
            moves += final_moves
            for move in final_moves:
                self.update_puzzle(move)
                print self.__str__()
            assert self.lower_row_invariant(target_row - 1,self.get_width() - 1)    
            return moves
                
            
            
    #############################################################
    # Phase two methods

    def row0_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row zero invariant
        at the given column (col > 1)
        Returns a boolean
        """
        for dummy_row in range(self.get_height()):
            for dummy_col in range(self.get_width()):
                if (dummy_row == 0 and dummy_col == target_col):
                    if self.get_number(0,target_col)!= 0:
                        return False
                elif (dummy_row == 0 and dummy_col>= target_col) or (dummy_row == 1 and dummy_col >= target_col):
                    if self.get_number(dummy_row,dummy_col) != self.get_solved_number(dummy_row,dummy_col):
                        return False
                elif dummy_row >1:
                    if self.get_number(dummy_row,dummy_col) != self.get_solved_number(dummy_row,dummy_col):
                        return False
        return True                

    def row1_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row one invariant
        at the given column (col > 1)
        Returns a boolean
        """
        if self.lower_row_invariant(1,target_col) == False:
            return False
        for dummy_col in range(target_col+1,self.get_width()):
            if self.get_number(0,dummy_col) != self.get_solved_number(0,dummy_col):
                return False
        return True    

    def solve_row0_tile(self, target_col):
        """
        Solve the tile in row zero at the specified column
        Updates puzzle and returns a move string
        """
        assert self.row0_invariant(target_col)
        # this method has two cases and the second cases has two methods
        # the first case is when the target tile is at right of the zero tile
        if self.current_position(0,target_col) == (0,target_col-1):
            moves = 'ld'
            for move in moves:
                self.update_puzzle(move)
                #print self.__str__()
            return moves
        # second part
        else:
            # first phase
            if self.current_position(0,target_col) == (1,target_col-1):
                ans = ''
                moves = 'lld'
                moves += 'urdlurrdluldrruld'
                ans += moves
                for move in moves:
                    self.update_puzzle(move)
                    #print self.__str__()
                return ans    
            elif self.current_position(0,target_col)[0] == 0:
                ans = ''
                moves = 'ld'
                col_diff = (target_col - 1) - self.current_position(0,target_col)[1]
                moves += 'l'*col_diff
                moves += 'uld'
                ans += moves
                for move in moves:
                    self.update_puzzle(move)
                    #print self.__str__()
                col_diff = target_col - 1 - self.current_position(0,target_col)[1]
                final_moves = col_diff*'urrdl'
                final_moves += 'urdlurrdluldrruld'
                ans += final_moves
                for move in final_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
                return ans    
            
            elif self.current_position(0,target_col)[0] == 1:
                ans = ''
                moves = 'ld'
                ans += moves
                for move in moves:
                    self.update_puzzle(move)
                    #print self.__str__()
                col_diff = target_col - 1 - self.current_position(0,target_col)[1]
                final_moves  = 'l'*col_diff
                final_moves += 'urrdl'*(col_diff-1)
                final_moves += 'urdlurrdluldrruld'
                ans += final_moves
                for move in final_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
                return ans    

    def solve_row1_tile(self, target_col):
        """
        Solve the tile in row one at the specified column
        Updates puzzle and returns a move string
        """
        assert self.row1_invariant(target_col)
        if self.current_position(1,target_col) == (0,target_col):
            self.update_puzzle('u')
            return 'u'
        elif self.current_position(1,target_col)[0] == 0:
            ans = ''
            col_diff = target_col - self.current_position(1,target_col)[1] 
            moves = 'l'*(col_diff)
            if moves != '':    
                moves += 'urdl'
            ans += moves
            for move in moves:
                self.update_puzzle(move)
                print self.__str__()
            col_diff = target_col - self.current_position(1,target_col)[1]
            #print col_diff
            final_moves = ''
            final_moves = 'urrdl'*(col_diff)    
            final_moves += 'ur'
            ans += final_moves
            for move in final_moves:
                self.update_puzzle(move)
                print self.__str__()
            assert self.row0_invariant(target_col)    
            return ans
        elif self.current_position(1,target_col)[0] == 1:
            col_diff = target_col - self.current_position(1,target_col)[1]
            #print col_diff
            ans = ''
            moves = 'l'*(col_diff)
            ans += moves
            for move in moves:
                self.update_puzzle(move)
                #print self.__str__()
            while self.current_position(1,target_col)[1] - target_col!= 0:
                cyclic_moves = 'urrdl'
                for move in cyclic_moves:
                    self.update_puzzle(move)
                    #print self.__str__()
                ans += cyclic_moves
            ans += 'ur'
            for move in 'ur':
                self.update_puzzle(move)
                #print self.__str__()
        assert self.row0_invariant(target_col)       
        return ans    
        
    ###########################################################
    # Phase 3 methods

    def solve_2x2(self):
        """
        Solve the upper left 2x2 part of the puzzle
        Updates the puzzle and returns a move string
        """
        assert self.row1_invariant(1)
        ans = ''
        moves = 'ul'
        ans += moves
        first = self.get_width()
        second = first + 1
        for move in moves:
            self.update_puzzle(move)
        if self.get_number(1,0) == first and self.get_number(1,1) == second:
            return moves
        elif self.get_number(1,0) == 1 and self.get_number(1,1) == first:
            ans += 'drul'
            for move in 'drul':
                self.update_puzzle(move)
            return ans
        else:
            ans += 'rdlu'
            for move in 'rdlu':
                self.update_puzzle(move)
            return ans
        

    def solve_puzzle(self):
        """
        Generate a solution string for a puzzle
        Updates the puzzle and returns a move string
        """
        ans = ''
        zero = self.get_zero_tile()
        ans += 'r'*(self.get_width() - zero[0] - 1)
        ans += 'd'*(self.get_height() - zero[1] - 1)
        
        for row in range(self.get_height() - 1,-1,-1):
            for col in range(self.get_width() - 1,0,-1):
                ans += self.solve_interior_tile(row,col)
            ans += self.solve_col0_tile(row)
          
        for col in range(self.get_width()-1,1,-1):
            ans += self.solve_row1_tile(col)
            ans += self.solve_row0_tile(col)
            
        ans += self.solve_2x2()
        return ans

# Start interactive simulation
#poc_fifteen_gui.FifteenGUI(Puzzle(4, 4))
