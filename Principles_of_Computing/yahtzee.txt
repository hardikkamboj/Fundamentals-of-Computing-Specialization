"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    die = [1,2,3,4,5,6]
    score = 0
    for die_value in die:
        maximum = 0
        for hand_value in hand:
            if die_value == hand_value:
                maximum += die_value
        if maximum > score:
            score = maximum
    return score        

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    held = held_dice
    outcomes = tuple(range(1,num_die_sides + 1))
    free_permutations = gen_all_sequences(outcomes,num_free_dice)
    all_sequences = [(sequence + held) for sequence in free_permutations]
    score_set = [score(sequences) for sequences in all_sequences]
    ans = float(sum(score_set)) / float(len(score_set))
    return ans    


def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    binary_seq = gen_all_sequences(set([0,1]),len(hand))
    all_holds = set([])
    binary_seq = sorted(binary_seq)
    for seq in binary_seq:
        hold = []
        for bit,die in zip(seq,hand):
            if bit == 1:
                hold.append(die)
        all_holds.add(tuple(hold))  
        all_holds = set(all_holds)
    return set(sorted(all_holds))     
          
           
  


def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    all_holds = gen_all_holds(hand)
    maximum = 0
    max_hold = ()
    for hold in all_holds:
        exp_score = expected_value(hold,num_die_sides,num_die_sides - len(hold))
        if exp_score > maximum:
            maximum = exp_score
            max_hold = hold
    return (maximum,max_hold)        

def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
run_example()


import poc_holds_testsuite
poc_holds_testsuite.run_suite(gen_all_holds)
                                       
    
    
    




    