"""
Clone of 2048 game.
"""

import poc_2048_gui

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

                                         
def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    without_zero = []
    for index in range(len(line)):
        if line[index] != 0:
            without_zero.append(line[index])
    answer = []
    while len(without_zero) != 0:
        if len(without_zero) == 1:
            answer.append(without_zero[0])
            without_zero.pop()
        elif without_zero[0] == without_zero[1]:
            answer.append(without_zero[0]*2)
            without_zero.pop(1)
            without_zero.pop(0)
        else:
            answer.append(without_zero[0])
            without_zero.pop(0)
    for index in range(len(answer),len(line)):
        answer.append(0)
            
    return answer


class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        """
        inititalises the class TwentyFortyEight
        """
        self.height = grid_height
        self.width = grid_width
        self.grid = []
        self.UP = [(0,i) for i in range(self.width)] 
        self.DOWN = [(self.height - 1,i) for i in range(self.width)]
        self.RIGHT = [(i,self.width - 1) for i in range(self.height)]
        self.LEFT = [(i,0) for i in range(self.height)]
        
        self.ini_indeces = {UP:self.UP , DOWN:self.DOWN , RIGHT:self.RIGHT , LEFT:self.LEFT }
        self.reset()    
            
    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self.grid = [[0 for _ in range(self.width)]
                    for _ in range(self.height)]
        self.new_tile()
        self.new_tile()
        

    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        return str(self.grid)
    
    def get_grid_height(self):
        """
        Get the height of the board.
        """
        return self.height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        return self.width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        start = self.ini_indeces[direction]
        dirc = OFFSETS[direction]
        ending_index = None
        if direction == UP or direction == DOWN:
            ending_index = self.height
        else: ending_index = self.width
        
        copy_matrix = [[(0) for _ in range(self.width)] for _ in range(self.height)]

        for dum_row in range(self.height):
            for dum_col in range(self.width):
                copy_matrix[dum_row][dum_col] = self.grid[dum_row][dum_col]
        for point in start:
            temp_list = []        
            for step in range(ending_index):    
                row = point[0] + dirc[0]*step
                col = point[1] + dirc[1]*step
                temp_list.append(self.grid[row][col])
            returned_list = merge(temp_list)
            index = 0
            for step in range(ending_index):
                row = point[0] + dirc[0]*step
                col = point[1] + dirc[1]*step
                self.grid[row][col] = returned_list[index]
                index += 1
        if not(copy_matrix == self.grid):
            self.new_tile()
        
    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        import random
        has_0 = False
        row = random.randrange(self.height)
        col = random.randrange(self.width)
        for row in range(self.height):
            for col in range(self.width):
                if self.grid[row][col] == 0:
                    has_0 = True
        while self.grid[row][col] != 0 and has_0 == True:
            row = random.randrange(self.height)
            col = random.randrange(self.width)
        if has_0 == True:
            self.grid[row][col] = random.choice([2,2,2,2,2,2,2,2,2,4])
        

    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        self.grid[row][col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        return self.grid[row][col]



poc_2048_gui.run_gui(TwentyFortyEight(4, 4))
